local Workspace = cloneref(game:GetService("Workspace"))
local RunService = cloneref(game:GetService("RunService"))
local Camera = Workspace.CurrentCamera

local fov_circle_outer = Drawing.new("Circle")
fov_circle_outer.Visible = true
fov_circle_outer.Thickness = 3
fov_circle_outer.Color = Color3.fromRGB(0, 0, 0)
fov_circle_outer.Position = Camera.ViewportSize / 2
fov_circle_outer.Radius = 86

local fov_circle_inner = Drawing.new("Circle")
fov_circle_inner.Visible = true
fov_circle_inner.Thickness = 1
fov_circle_inner.Color = Color3.fromRGB(144, 238, 144)
fov_circle_inner.Position = Camera.ViewportSize / 2
fov_circle_inner.Radius = 85

local snap_line_outer = Drawing.new("Line")
snap_line_outer.Visible = false
snap_line_outer.Color = Color3.fromRGB(0, 0, 0)
snap_line_outer.Thickness = 3

local snap_line_inner = Drawing.new("Line")
snap_line_inner.Visible = false
snap_line_inner.Color = Color3.fromRGB(255, 255, 255)
snap_line_inner.Thickness = 1

local Settings = {
    ["Combat"] = {
        ["Aimbot"] = {
            ["Enabled"]    = true,
            ["Mode"]       = "None",
            ["Target"]     = "Head",
            ["Enabled2"]   = false,
            ["Fov Size"]   = 85,
            ["Resover"]    = false,
        }
    },
}

function to_viewport(pos)
    if typeof(pos) ~= "Vector3" then return Vector2.zero, false end
    local point, on = Camera:WorldToViewportPoint(pos)
    return Vector2.new(point.X, point.Y), on
end

local Classes = {
    ["PlayerClient"] = {},
    ["Character"] = {},
    ["BowClient"] = {},
    ["Camera"] = {},
    ["RangedWeaponClient"] = {},
    ["GetEquippedItem"] = {},
    ["FPS"] = {},
}

for _, v in pairs(getgc(true)) do
    if typeof(v) == "function" and islclosure(v) then
        local info = debug.getinfo(v)
        local name = string.match(info.short_src, "%.([%w_]+)$")
        if name and Classes[name] and info.name ~= nil then
            Classes[name][info.name] = info.func
        end
    end
end

local Players = debug.getupvalue(Classes.PlayerClient.updatePlayers, 1)

function IsSleeping(Player)
    local Animations = Player.AnimationController:GetPlayingAnimationTracks()
    for _, v in pairs(Animations) do
        if v.IsPlaying and v.Animation.AnimationId == "rbxassetid://13280887764" then
            return true
        end
    end
    return false
end

local target = nil

function GetClosestTarget(maxDistance)
    local closestTarget, closestDistance = nil, math.huge
    local viewportCenter = Camera.ViewportSize / 2

    for i, v in pairs(Players) do
        if v.model:FindFirstChild("HumanoidRootPart") and not IsSleeping(v.model) and v.id ~= "635665" and v.id ~= "636336" then
            local screenPoint, onScreen = Camera:WorldToViewportPoint(v.model.Head.Position)

            if onScreen then
                local distanceFromCenter = (Vector2.new(screenPoint.X, screenPoint.Y) - viewportCenter).Magnitude

                if distanceFromCenter < closestDistance and distanceFromCenter < fov_circle_inner.Radius then
                    closestTarget = v
                    closestDistance = distanceFromCenter
                end
            end
        end
    end

    return closestTarget
end

RunService.Heartbeat:Connect(function()
    target = GetClosestTarget(1200)
    
    if target and target.model and target.model:FindFirstChild("Head") then
        local targetHeadPosition = target.model.Head.Position
        local targetScreenPosition, onScreen = to_viewport(targetHeadPosition)
        
        if onScreen then
            snap_line_outer.Visible = true
            snap_line_inner.Visible = true
            
            snap_line_outer.From = Camera.ViewportSize / 2
            snap_line_outer.To = targetScreenPosition
            
            snap_line_inner.From = Camera.ViewportSize / 2
            snap_line_inner.To = targetScreenPosition
        else
            snap_line_outer.Visible = false
            snap_line_inner.Visible = false
        end
    else
        snap_line_outer.Visible = false
        snap_line_inner.Visible = false
    end
end)

local has_shot = 0
local oldfromOrientation
oldfromOrientation = hookfunction(CFrame.fromOrientation, newcclosure(function(p, y, r)
    if debug.info(3, "f") and debug.info(3, "n") == "fire" then
        if not target or not target.model or IsSleeping(target.model) then
            return oldfromOrientation(p, y, r)
        end

        local targetHead = target.model:FindFirstChild("Head")
        if not targetHead then
            return oldfromOrientation(p, y, r)
        end

        -- Teleport bullet instantly to the enemy's head
        return Camera.CFrame:Inverse() * CFrame.lookAt(Camera.CFrame.Position, targetHead.Position)
    end

    return oldfromOrientation(p, y, r)
end))
