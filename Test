local Workspace = cloneref(game:GetService("Workspace"))
local RunService = cloneref(game:GetService("RunService"))
local Camera = Workspace.CurrentCamera
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- FOV Circles
local fov_circle_outer = Drawing.new("Circle")
fov_circle_outer.Visible = true
fov_circle_outer.Thickness = 3
fov_circle_outer.Color = Color3.fromRGB(0, 0, 0)
fov_circle_outer.Position = Camera.ViewportSize / 2
fov_circle_outer.Radius = 86

local fov_circle_inner = Drawing.new("Circle")
fov_circle_inner.Visible = true
fov_circle_inner.Thickness = 1
fov_circle_inner.Color = Color3.fromRGB(144, 238, 144)
fov_circle_inner.Position = Camera.ViewportSize / 2
fov_circle_inner.Radius = 85

-- Snaplines
local snap_line_outer = Drawing.new("Line")
snap_line_outer.Visible = false
snap_line_outer.Color = Color3.fromRGB(0, 0, 0)
snap_line_outer.Thickness = 3

local snap_line_inner = Drawing.new("Line")
snap_line_inner.Visible = false
snap_line_inner.Color = Color3.fromRGB(255, 255, 255)
snap_line_inner.Thickness = 1

local Settings = {
    ["Combat"] = {
        ["Aimbot"] = {
            ["Enabled"]    = true,
            ["Target"]     = "Head",
            ["Fov Size"]   = 85,
            ["Resolver"]   = false,
        }
    },
}

-- Function to convert world position to screen position
function to_viewport(pos)
    if typeof(pos) ~= "Vector3" then return Vector2.zero, false end
    local point, onScreen = Camera:WorldToViewportPoint(pos)
    return Vector2.new(point.X, point.Y), onScreen
end

-- Function to check if a player is sleeping
function IsSleeping(Player)
    local Animations = Player.AnimationController:GetPlayingAnimationTracks()
    for _, v in pairs(Animations) do
        if v.IsPlaying and v.Animation.AnimationId == "rbxassetid://13280887764" then
            return true
        end
    end
    return false
end

-- Function to get the closest enemy inside the FOV, ignoring sleeping players
function GetClosestTarget(maxDistance)
    local closestTarget, closestDistance = nil, math.huge
    local viewportCenter = Camera.ViewportSize / 2

    for _, v in pairs(Players:GetPlayers()) do
        if v ~= LocalPlayer and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
            local head = v.Character:FindFirstChild("Head")
            if head and not IsSleeping(v.Character) then
                local distanceToPlayer = (v.Character.HumanoidRootPart.Position - Camera.CFrame.Position).Magnitude
                if distanceToPlayer <= maxDistance then
                    local screenPoint, onScreen = Camera:WorldToViewportPoint(head.Position)
                    local distanceFromCenter = (Vector2.new(screenPoint.X, screenPoint.Y) - viewportCenter).Magnitude
                    if onScreen and distanceFromCenter < closestDistance and distanceFromCenter < fov_circle_inner.Radius then
                        closestTarget = head
                        closestDistance = distanceFromCenter
                    end
                end
            end
        end
    end
    return closestTarget
end

-- Silent Aim (Magic Bullet)
local oldfromOrientation
oldfromOrientation = hookfunction(CFrame.fromOrientation, newcclosure(function(p, y, r)
    if debug.info(3, "n") == "fire" then
        local target = GetClosestTarget(1200)

        if target then
            -- Magic Bullet: Instantly teleport bullets to enemy's head
            return Camera.CFrame:Inverse() * CFrame.lookAt(Camera.CFrame.Position, target.Position)
        end
    end
    return oldfromOrientation(p, y, r)
end))

-- Update Snaplines
RunService.RenderStepped:Connect(function()
    local target = GetClosestTarget(1200)

    if target then
        local targetScreenPosition, onScreen = to_viewport(target.Position)

        if onScreen then
            snap_line_outer.Visible = true
            snap_line_inner.Visible = true

            snap_line_outer.From = Camera.ViewportSize / 2
            snap_line_outer.To = targetScreenPosition

            snap_line_inner.From = Camera.ViewportSize / 2
            snap_line_inner.To = targetScreenPosition
        else
            snap_line_outer.Visible = false
            snap_line_inner.Visible = false
        end
    else
        snap_line_outer.Visible = false
        snap_line_inner.Visible = false
    end
end)
